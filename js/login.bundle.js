(function () {
'use strict';

window.globalVar = window.globalVar || {};

var errorMsg = {
	"101": "Invalid username or password.",
	"-1": "Oops! Something went wrong with the system..."
};

function customAlert(msg, cb) {
	return bootbox.alert(msg, cb);
}

















// FOR DRIVER








// FOR RIDER

const ErrorHandler = (()=>{
	function decode(errCode){
		let code = errCode.toString();
		return errorMsg[code];
	}

	// alert, prompt, confirmation, custom
	// (info, warning, error, success)
	function alert(errCode, callback, type = 'error') {
		let msg = decode(errCode) || errCode;
		customAlert(msg);
	}

	return {
		decode,
		alert
	};

})();

let apiURL = `${(window.globalVar.baseURI || document.baseURI)}api`;

function ajax(options) {
	return new Promise((resolve, reject) => {
		$.ajax(options).done(function(res) {
			if(res.errCode == 1) {
				resolve(res.data);
			} else {
				ErrorHandler.alert(res.errCode);
				console.error(ErrorHandler.decode(res.errCode));
				reject(res.errCode);
			}
		}).fail(function(xhr, msg, err) { 
			console.error('Error: ', err);
		});
	});
}



/**
 * SHARED API
   ========================================*/

/**
 * LOGIN
 * 
 * @param reqData [FormData | Object] { username, password }
 * 
 * Expected response when sucessfully logged in: 
 * - errCode: 1
 * - role: (1 = 'driver' | 2 = 'rider') (in ['data'])
 * 
 */
function login(reqData) {
	return ajax({
		url: `${apiURL}/login`,
		method: 'POST',
		data: reqData,
		dataType: 'json',
	});
}







/**
 * RIDER API
   ========================================*/

// return [{name, longitude, latitude, distance},{name,...}]







// Betting













/**
 * DRIVER API
   ========================================*/

// Availability






// Jobs







// Betting



// Ride

// Shorthand for ONLOAD, same as $(document).ready(...);
$(function(){

	$('#loginBtn').on('click', function(){
		let info = $('#loginForm').serialize();
		
		login(info).then((data)=>{
			// Redirect user to their page according to their role
			let role = (data.userType == 1)? 'driver': 'rider';
			location.href = `${ globalVar.baseURI || document.baseURI }${role}`;
		});
	});

});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
